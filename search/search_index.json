{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Index"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"Introduction/","text":"Objective The objective of task-5 of the eyantra was to demonstrate a Warehouse Management System that can sort the packages based on the incoming orders from different cities. Components Two UR5 Arms. A camera. Functioning To perform the above task we need to function as follows using the camera we should identify the colour of all the 9 packages (3 of each colour) either through colour detection or QR decoding or a combination of both. After a package is identified the Inventory sheet of the Inventory Management Spreadsheet is to be updated. The Inventory Management Spreadsheet is a Google Spreadsheet that is developed by us in the task-1 using ROS-IoT bridge. After a one minute of simulated time, a total of 9 orders will be published on /eyrc/vb/ /orders MQTT topic at different intervals. The orders are then extracted from this MQTT topic using ROS-IoT Bridge. Then the orders are processed based on the priority coded into their colour. We need to update the Orders Dispatched sheet in the Inventory Management Spreadsheet as soon as it is placed on the conveyor belt by the first UR5 arm(UR5#1) and an email notification is sent to the user. Then the second UR5 arm(UR5#2) extract the packages from the conveyor belt and sort them according to their colour. Then we need to update the Orders Shipped sheet of the Warehouse Inventory Mastersheet indicating that the packages are picked and dropped in the buns by the UR5#2 arm. As this goes on we need to update the Warehouse Inventory Dashboard in real-time. In the Warehouse Inventory Mastersheet we can create a separate sheet called Dashboard which can show values from other sheet in the Warehouse Inventory Mastersheet spreadsheet . Teams can use this Dashboard sheet as a JSON endpoint to update the Warehouse Inventory Dashboard in real-time.","title":"Introduction"},{"location":"Introduction/#objective","text":"The objective of task-5 of the eyantra was to demonstrate a Warehouse Management System that can sort the packages based on the incoming orders from different cities.","title":"Objective"},{"location":"Introduction/#components","text":"Two UR5 Arms. A camera.","title":"Components"},{"location":"Introduction/#functioning","text":"To perform the above task we need to function as follows using the camera we should identify the colour of all the 9 packages (3 of each colour) either through colour detection or QR decoding or a combination of both. After a package is identified the Inventory sheet of the Inventory Management Spreadsheet is to be updated. The Inventory Management Spreadsheet is a Google Spreadsheet that is developed by us in the task-1 using ROS-IoT bridge. After a one minute of simulated time, a total of 9 orders will be published on /eyrc/vb/ /orders MQTT topic at different intervals. The orders are then extracted from this MQTT topic using ROS-IoT Bridge. Then the orders are processed based on the priority coded into their colour. We need to update the Orders Dispatched sheet in the Inventory Management Spreadsheet as soon as it is placed on the conveyor belt by the first UR5 arm(UR5#1) and an email notification is sent to the user. Then the second UR5 arm(UR5#2) extract the packages from the conveyor belt and sort them according to their colour. Then we need to update the Orders Shipped sheet of the Warehouse Inventory Mastersheet indicating that the packages are picked and dropped in the buns by the UR5#2 arm. As this goes on we need to update the Warehouse Inventory Dashboard in real-time. In the Warehouse Inventory Mastersheet we can create a separate sheet called Dashboard which can show values from other sheet in the Warehouse Inventory Mastersheet spreadsheet . Teams can use this Dashboard sheet as a JSON endpoint to update the Warehouse Inventory Dashboard in real-time.","title":"Functioning"},{"location":"arm1/","text":"","title":"arm1"},{"location":"arm2/","text":"","title":"arm2"},{"location":"client/","text":"","title":"Action client"},{"location":"contents/","text":"\"action\" directory msgRosIot.action \"config\" directory config_pyiot.yaml \"include\" directory \"launch\" directory msgMqttSub.msg \"package.xml\" file scripts node_iot_ros_bridge_action_server.py node_iot_ros_bridge_action_client.py \"pyiot\" directory \"src\" directory \"CMakeLists.txt\" file \"package.xml\" file","title":"Contents"},{"location":"contents/#action-directory","text":"msgRosIot.action","title":"\"action\" directory"},{"location":"contents/#config-directory","text":"config_pyiot.yaml","title":"\"config\" directory"},{"location":"contents/#include-directory","text":"","title":"\"include\" directory"},{"location":"contents/#launch-directory","text":"msgMqttSub.msg","title":"\"launch\" directory"},{"location":"contents/#packagexml-file","text":"","title":"\"package.xml\" file"},{"location":"contents/#scripts","text":"node_iot_ros_bridge_action_server.py node_iot_ros_bridge_action_client.py","title":"scripts"},{"location":"contents/#pyiot-directory","text":"","title":"\"pyiot\" directory"},{"location":"contents/#src-directory","text":"","title":"\"src\" directory"},{"location":"contents/#cmakeliststxt-file","text":"","title":"\"CMakeLists.txt\" file"},{"location":"contents/#packagexml-file_1","text":"","title":"\"package.xml\" file"},{"location":"demovid/","text":"","title":"demo"},{"location":"server/","text":"","title":"Action server"}]}